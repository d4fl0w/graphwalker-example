  package org.graphwalker;

  import org.graphwalker.core.machine.ExecutionContext;
  import org.graphwalker.java.annotation.GraphWalker;

  import java.util.*;

  /**
 * See: http://graphwalker.org/docs/maven_archetype for more details
 * <p/>
 * Implements the GraphWalker model: src/main/resources/SmallTest.graphml
 * The SmallTest.graphml can be opened and edited using http://www.yworks.com/en/products/yfiles/yed/
 * <p/>
 * For convienicene, a jpg image exists side-by-side in the same folder.
 * <p/>
 * The @GraphWalker annotation, has the following meaning:
 * 1) value defines the generator of this test. Please read more
 * on the subject at: http://graphwalker.org/docs/path_generators_and_stop_conditions
 * 2) start defines the first element in the model to be executed. (Element is
 * either a vertex or an edge)
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn graphwalker:test
 */
@GraphWalker()
public class UsingDataFromTestImpl extends ExecutionContext implements UsingDataFromTest {

  private Deque<String> userNames = new LinkedList(Arrays.asList("Andy", "Trev", "Delight", "Roddy", "Sibyn", "Sydnie"));

  @Override
  public void e_A() {
    System.out.println("Running: e_A");
  }

  @Override
  public void e_B() {
    System.out.println("Running: e_B");
  }

  @Override
  public void e_Done() {
    System.out.println("Running: e_Done");
  }

  @Override
  public void v_A() {
    System.out.println("Running: v_A");
  }

  @Override
  public void v_B() {
    System.out.println("Running: v_B");
    if ( userNames.peek()  == null ) {
      setAttribute("isDone", true);
      System.out.println("  no more names to test");
      return;
    }
    System.out.println("  using name: " + userNames.pop());
  }

  @Override
  public void v_Done() {
    System.out.println("Running: v_Done");
  }
}
